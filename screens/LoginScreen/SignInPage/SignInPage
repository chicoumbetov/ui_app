import React, { useState } from 'react';
import {
  Button, Layout, Radio, Text,
} from '@ui-kitten/components';
import { Alert, Image, View } from 'react-native';
import { useForm } from 'react-hook-form';
import TextInput from '../../../components/Form/TextInput';
import { AvailableValidationRules } from '../../../components/Form/validation';
import { useUser } from '../../../utils/user';

type LoginForm = {
  email: string;
  motDePasse: string;
};

const SignInPage = () => {
  /**
     * Connecting SingIn form with aws by 'login' variable that calls Auth.signUp
     */
  const onSubmitLogin = async (data: LoginForm) => {
    // Sign In:
    const loginForm = useForm<LoginForm>();

    const {
      login, user,
    } = useUser();

    const [stayConnected, setStayConnected] = React.useState(false);

    const [signedIn, setSignedIn] = useState(false);
    const [onLoggin, setOnLoggin] = useState(true);
    const [onWaitingCode, setOnWaitingCode] = useState(false);
    const [onSignUp, setSignUp] = useState(false);
    const [finaliserCreation, setFinaliserCreation] = useState(false);

    const [loading, setLoading] = useState(false);

    console.log(login);
    // setOnLoggin(false);
    // setSignedIn(true);
    try {
      setLoading(true);

      if (login) await login(data.email, data.motDePasse);

      setLoading(false);
      console.log('onSubmitLogin declencé');
    } catch (error) {
      console.log(error);
      let message = 'Une erreur est survenue.';
      if (error.code === 'UserNotFoundException') {
        message = 'Vos identifiants sont erronés.';
      }
      if (error.code === 'PasswordResetRequiredException') {
        message = 'Vous devez réinitialiser votre mot de passe.';
      }
      if (error.code === 'UserNotConfirmedException') {
        // setOnChangePassword(true);
        setOnLoggin(false);
        message = 'Vous devez réinitialiser votre mot de passe.';
      }
      Alert.alert('Erreur', message);
      setLoading(false);
    }
  };

    return (
        <>
            {/* eslint-disable-next-line global-require */}
            <Layout style={{ alignItems: 'center' }}>
                {/* eslint-disable-next-line global-require */}
                <Image source={require('../../assets/Icones_omedom/logo_menu_principal.png')} style={{ height: 200 }} resizeMode="contain" />
            </Layout>

            <Layout>
                <Text style={{ fontSize: 25, color: 'black' }}>Très heureux de vous revoir, Benjamin</Text>
            </Layout>

            <TextInput name="email" placeholder="Votre e-mail" validators={[AvailableValidationRules.email]} />

            <TextInput name="motDePasse" secureTextEntry placeholder="Votre mot de passe" />

            <Layout style={{ flexDirection: 'row', padding: 5 }}>
                <Text>Souhaitez-vous rester connecté ?</Text>
                <Radio
                    checked={stayConnected}
                    onChange={(nextChecked) => setStayConnected(nextChecked)}
                >
                    {`Checked: ${stayConnected}`}
                </Radio>
            </Layout>
            <View style={{ flex: 2, flexDirection: 'column', justifyContent: 'space-evenly' }}>
                <Button
                    style={{ width: 130, margin: 2 }}
                    onPress={loginForm.handleSubmit(onSubmitLogin)}
                >
                    Se connecter
                </Button>
                <Button
                    style={{ width: 130, margin: 2 }}
                    onPress={() => {
                        setOnLoggin(false);
                        setSignUp(true);
                    }}
                >
                    {/* eslint-disable-next-line react/no-unescaped-entities */}
                    S'inscrire
                </Button>
            </View>

        </>;
    )
};

export default SignInPage;
