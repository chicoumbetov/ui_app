# enum Abonnement
# type AdresseType

# type Client
# type Compte

# type Bien
# enum TypeBien {
#enum TypeSociete

#type LigneBudget
# enum Frequence

# type InfoLocataire
# info CrÃ©dit   =>   type MensualiteCredit

enum Abonnement {
 UnADeuxBiens
 TroisACinqbiens
 PlusDeCinqBiens
}

type Adresse {
  adresse: String!
  complementAdresse: String
  codePostal: String!
  ville: String!
  pays: String!
}

# Type Client  and Compte
# Client & Adresse are connected by clientID
type Utilisateur @model @auth(rules: [
  {allow: owner, ownerField: "userID"}
  {allow: private, operations: [read]}
])
@key(fields: ["userID"], name:"byUserID")
{
  id: ID!
  userID: String
  nom: String
  prenom: String
  email: AWSEmail @auth (rules: [{allow: owner, ownerField: "userID"}])
  numeroTel: AWSPhone @auth (rules: [{allow: owner, ownerField: "userID"}])
  optIn: Boolean @auth (rules: [{allow: owner, ownerField: "userID"}])
  adresse: Adresse @auth (rules: [{allow: owner, ownerField: "userID"}])

  avatarUri: String
  dateNaissance: AWSDate @auth (rules: [{allow: owner, ownerField: "userID"}])
  abonnement: Abonnement @auth (rules: [{allow: owner, ownerField: "userID"}])
}


#type RealEstate @model @auth(rules: [
#  {allow: owner, ownerField: "owners"},
#  {allow: owner, ownerField: "shared", operations: [read]}
#])
#{
#  id: ID!
#  owners: [String]
#  shared: [String]
#  name: String
#
#  bankAccounts: [BankAccount] @connection(
#    fields: ["id"]
#  )
#}
#
#type BankAccount @model(queries: null) {
#  id: ID!
#  bankName: String!
#  accountNumber: String!
#  lines: [BankLine]
#}
#
#
#type BankLine @model(queries: null) {
#  id: ID!
#  description: String!
#  amount: Float
#  date: AWSDate
#}
